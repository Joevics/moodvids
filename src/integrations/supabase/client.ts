
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://ucdskpmaqrzavtgvvwar.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVjZHNrcG1hcXJ6YXZ0Z3Z2d2FyIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzkxODE2NDAsImV4cCI6MjA1NDc1NzY0MH0.Sm_uX3HL9r9hbZXclAbCzqIokVWAtO5pJXUimUs-Wgc";

// Create a custom typed client that includes the functions we need for voting
type SupabaseClientWithFunctions = ReturnType<typeof createClient<Database>>;

export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
      storage: localStorage
    },
    global: {
      headers: {
        'Content-Type': 'application/json'
      }
    }
  }
) as SupabaseClientWithFunctions;

// Simple vote counter function for upvotes and downvotes
export const updateVoteCounter = async (
  topPickId: string, 
  voteType: 'upvote' | 'downvote'
): Promise<void> => {
  try {
    console.log(`Updating vote counter for pick ${topPickId} with vote type ${voteType}`);
    
    // Get the current pick to update its vote count
    const { data: pick, error: getError } = await supabase
      .from('top_picks')
      .select('upvotes, downvotes')
      .eq('id', topPickId)
      .single();
      
    if (getError) {
      console.error("Error getting top pick:", getError);
      throw getError;
    }
    
    // Update with the new vote count
    if (voteType === 'upvote') {
      const { error: updateError } = await supabase
        .from('top_picks')
        .update({ upvotes: (pick?.upvotes || 0) + 1 })
        .eq('id', topPickId);
        
      if (updateError) {
        console.error("Error updating upvotes:", updateError);
        throw updateError;
      }
    } else {
      const { error: updateError } = await supabase
        .from('top_picks')
        .update({ downvotes: (pick?.downvotes || 0) + 1 })
        .eq('id', topPickId);
        
      if (updateError) {
        console.error("Error updating downvotes:", updateError);
        throw updateError;
      }
    }
    
    console.log(`Successfully incremented ${voteType} counter`);
  } catch (error) {
    console.error("Error in vote counter function:", error);
    throw error;
  }
};
